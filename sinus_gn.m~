% Close all figures and clear workspace
close all;
clear;

% Create 3*sin(2*x)+7 and plot it
syms x;
f = matlabFunction(paramedSinus([x,3,2,7]));
fplot(f, 'Color', 'green')
hold on;
grid on;

% Generate evaluation points which will be used fit the curve
points = (-2:1:2).';
n = length(points)

% Evaluate f at generated points and add some errors
values = double(f(points)) + linespace(-0.1,0.1,n);

% plot generated points
scatter(points,values);


% Create residual matrix with parameters a, b and c
% model: rMatrix(i) = a*sin(b*x(i))+c-y(i)
syms a b c;
rMatrix = paramedSinus([points, a*ones(n,1), b*ones(n,1), c-values])

% Get a vetor matlab function for the 
r = matlabFunction(rMatrix, 'Vars', {[a b c]})
j = matlabFunction(jacobian(rMatrix, 'Vars', {[a b c]}))

j = jacobian(func_mat)
jf = matlabFunction(j)
%r = symfun(func_mat, [a b c])

%r = symfun(func_mat,
    

% r = symfun([a*sin(points(1)*b)+c-y(1);
%             a*sin(points(2)*b)+c-y(2);
%             a*sin(points(3)*b)+c-y(3)], [a b c])
j = jacobian(r);
matf_r = matlabFunction(r);
matf_j = matlabFunction(j);
func_r = @(x) (matf_r(x(1),x(2),x(3)).');

func_j = @(x) (matf_j(x(1),x(2),x(3)));
%params = [2,1.5,6].'
params = [1,1,0].'

params
func_r(params)
func_j(params)

current_f = '';
for i=1:100
    params = gaussnewton(params,func_r,func_j,1)    
    %if mod(i,10) == 0
        norm(func_r(params))
        f_step = symfun(params(1)*sin(x*params(2))+params(3), x);
        delete(current_f);
        current_f = fplot(f_step, 'Color', 'red');
        drawnow;    
        pause(0.2);
    %end
end